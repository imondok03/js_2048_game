{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static gameStatus = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.status = $a5fd07fa01589658$var$Game.gameStatus.idle;\n        this.score = 0;\n        this.initialState = initialState;\n        this.state = initialState.map((row)=>[\n                ...row\n            ]);\n    }\n    getState() {\n        return this.state;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    moveLeft() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.gameStatus.playing) return;\n        let movesAVLBL = false;\n        const newState = this.state.map((row)=>{\n            const filteredRow = row.filter((cell)=>cell !== 0);\n            const newRow = [];\n            for(let i = 0; i < filteredRow.length; i++)if (filteredRow[i] === filteredRow[i + 1]) {\n                const mergedValue = filteredRow[i] * 2;\n                newRow.push(mergedValue);\n                this.score += mergedValue;\n                i++;\n                movesAVLBL = true;\n            } else newRow.push(filteredRow[i]);\n            while(newRow.length < row.length)newRow.push(0);\n            if (!movesAVLBL && !row.every((cell, index)=>cell === newRow[index])) movesAVLBL = true;\n            return newRow;\n        });\n        if (movesAVLBL) {\n            this.state = newState;\n            this.addCell();\n            this.setState();\n            this.checkStatus();\n        }\n        return movesAVLBL;\n    }\n    moveRight() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.gameStatus.playing) return;\n        let movesAVLBL = false;\n        const newState = this.state.map((row)=>{\n            const filteredRow = row.filter((cell)=>cell !== 0);\n            const newRow = [];\n            for(let i = filteredRow.length - 1; i >= 0; i--)if (filteredRow[i] === filteredRow[i - 1]) {\n                const mergedValue = filteredRow[i] * 2;\n                newRow.unshift(mergedValue);\n                this.score += mergedValue;\n                i--;\n                movesAVLBL = true;\n            } else newRow.unshift(filteredRow[i]);\n            while(newRow.length < row.length)newRow.unshift(0);\n            if (!movesAVLBL && !row.every((cell, index)=>cell === newRow[index])) movesAVLBL = true;\n            return newRow;\n        });\n        if (movesAVLBL) {\n            this.state = newState;\n            this.addCell();\n            this.setState();\n            this.checkStatus();\n        }\n        return movesAVLBL;\n    }\n    moveUp() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.gameStatus.playing) return;\n        let movesAVLBL = false;\n        const newState = this.state.map((row)=>[\n                ...row\n            ]);\n        for(let c = 0; c < this.state[0].length; c++){\n            const filteredColumn = [];\n            for(let r = 0; r < this.state.length; r++)if (this.state[r][c] !== 0) filteredColumn.push(this.state[r][c]);\n            const newColumn = [];\n            for(let i = 0; i < filteredColumn.length; i++)if (filteredColumn[i] === filteredColumn[i + 1]) {\n                const mergedValue = filteredColumn[i] * 2;\n                newColumn.push(mergedValue);\n                this.score += mergedValue;\n                i++;\n                movesAVLBL = true;\n            } else newColumn.push(filteredColumn[i]);\n            while(newColumn.length < this.state.length)newColumn.push(0);\n            for(let r = 0; r < this.state.length; r++)if (newState[r][c] !== newColumn[r]) {\n                newState[r][c] = newColumn[r];\n                movesAVLBL = true;\n            }\n        }\n        if (movesAVLBL) {\n            this.state = newState;\n            this.addCell();\n            this.setState();\n            this.checkStatus();\n        }\n        return movesAVLBL;\n    }\n    moveDown() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.gameStatus.playing) return;\n        let movesAVLBL = false;\n        const newState = this.state.map((row)=>[\n                ...row\n            ]);\n        for(let c = 0; c < this.state[0].length; c++){\n            const filteredColumn = [];\n            for(let r = this.state.length - 1; r >= 0; r--)if (this.state[r][c] !== 0) filteredColumn.push(this.state[r][c]);\n            const newColumn = [];\n            for(let i = 0; i < filteredColumn.length; i++)if (filteredColumn[i] === filteredColumn[i + 1]) {\n                const mergedValue = filteredColumn[i] * 2;\n                newColumn.unshift(mergedValue);\n                this.score += mergedValue;\n                i++;\n                movesAVLBL = true;\n            } else newColumn.unshift(filteredColumn[i]);\n            while(newColumn.length < this.state.length)newColumn.unshift(0);\n            for(let r = 0; r < this.state.length; r++)if (newState[r][c] !== newColumn[r]) {\n                newState[r][c] = newColumn[r];\n                movesAVLBL = true;\n            }\n        }\n        if (movesAVLBL) {\n            this.state = newState;\n            this.addCell();\n            this.setState();\n            this.checkStatus();\n        }\n        return movesAVLBL;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.gameStatus.playing;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.addCell();\n        this.addCell();\n        this.setState();\n    }\n    restart() {\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.gameStatus.idle;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.setState();\n    }\n    addCell() {\n        const emptyCells = [];\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 0) emptyCells.push({\n                r: i,\n                c: j\n            });\n        }\n        if (emptyCells.length === 0) return;\n        const randomIndex = this.addRandomNumber(emptyCells.length);\n        const { r: r, c: c } = emptyCells[randomIndex];\n        const newState = this.state.map((row)=>[\n                ...row\n            ]);\n        newState[r][c] = this.getRandomCell();\n        this.state = newState;\n    }\n    setState() {\n        const cells = document.querySelectorAll(\".field-cell\");\n        const stateValues = this.state.flat();\n        if (cells.length === 0) return;\n        for(let i = 0; i < stateValues.length; i++){\n            const currentCell = cells[i];\n            const currentValue = stateValues[i];\n            if (!currentCell) continue;\n            currentCell.className = \"field-cell\";\n            if (currentValue > 0) {\n                currentCell.textContent = currentValue;\n                currentCell.classList.add(`field-cell--${currentValue}`);\n            } else currentCell.textContent = \"\";\n        }\n    }\n    addRandomNumber(max) {\n        return Math.floor(Math.random() * max);\n    }\n    getRandomCell() {\n        return Math.random() < 0.9 ? 2 : 4;\n    }\n    checkStatus() {\n        let movesAVLBL = false;\n        let canMerge = false;\n        const size = this.state.length;\n        for(let i = 0; i < size; i++)if (this.state[i].includes(2048)) {\n            this.status = $a5fd07fa01589658$var$Game.gameStatus.win;\n            return;\n        }\n        for(let i = 0; i < size; i++){\n            for(let j = 0; j < size; j++){\n                if (this.state[i][j] === 0) movesAVLBL = true;\n                if (j < size - 1 && this.state[i][j] === this.state[i][j + 1]) canMerge = true;\n                if (i < size - 1 && this.state[i][j] === this.state[i + 1][j]) canMerge = true;\n                if (movesAVLBL || canMerge) break;\n            }\n            if (movesAVLBL || canMerge) break;\n        }\n        if (!movesAVLBL && !canMerge) this.status = $a5fd07fa01589658$var$Game.gameStatus.lose;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\n\"use strict\";\nconst $09e991522ca7e64e$var$game = new (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports)))();\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelectorAll(\".message-win\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$startButton.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startButton.classList = \"button restart\";\n        $09e991522ca7e64e$var$startButton.innerHTML = \"Restart\";\n        $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$getScore();\n    } else if ($09e991522ca7e64e$var$startButton.classList.contains(\"restart\")) {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$startButton.classList = \"button start\";\n        $09e991522ca7e64e$var$startButton.innerHTML = \"Start\";\n        $09e991522ca7e64e$var$startMessage.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$getScore();\n    }\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    switch(e.key){\n        case \"ArrowUp\":\n        case \"w\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n        case \"s\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        case \"ArrowLeft\":\n        case \"a\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n        case \"d\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n    }\n    $09e991522ca7e64e$var$getScore();\n    $09e991522ca7e64e$var$updateMessages();\n});\nfunction $09e991522ca7e64e$var$updateMessages() {\n    if ($09e991522ca7e64e$var$game.getStatus() === (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports))).gameStatus.lose) $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n    else if ($09e991522ca7e64e$var$game.getStatus() === (0, (/*@__PURE__*/$parcel$interopDefault($a5fd07fa01589658$exports))).gameStatus.win) $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n}\nfunction $09e991522ca7e64e$var$getScore() {\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n}\n\n\n//# sourceMappingURL=index.f4bd77fc.js.map\n","'use strict';\n\nimport Game from '../modules/Game.class';\n\nconst game = new Game();\n\nconst startButton = document.querySelector('.start');\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelectorAll('.message-win');\nconst gameScore = document.querySelector('.game-score');\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('start')) {\n    game.start();\n    startButton.classList = 'button restart';\n    startButton.innerHTML = 'Restart';\n    startMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n    winMessage.classList.add('hidden');\n\n    getScore();\n  } else if (startButton.classList.contains('restart')) {\n    game.restart();\n    startButton.classList = 'button start';\n    startButton.innerHTML = 'Start';\n    startMessage.classList.remove('hidden');\n    loseMessage.classList.add('hidden');\n    winMessage.classList.add('hidden');\n\n    getScore();\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case 'ArrowUp':\n    case 'w':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n    case 's':\n      game.moveDown();\n      break;\n    case 'ArrowLeft':\n    case 'a':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n    case 'd':\n      game.moveRight();\n      break;\n  }\n\n  getScore();\n  updateMessages();\n});\n\nfunction updateMessages() {\n  if (game.getStatus() === Game.gameStatus.lose) {\n    loseMessage.classList.remove('hidden');\n  } else if (game.getStatus() === Game.gameStatus.win) {\n    winMessage.classList.remove('hidden');\n  }\n}\n\nfunction getScore() {\n  gameScore.textContent = game.getScore();\n}\n","'use strict';\n\nclass Game {\n  static gameStatus = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.status = Game.gameStatus.idle;\n    this.score = 0;\n    this.initialState = initialState;\n    this.state = initialState.map((row) => [...row]);\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  moveLeft() {\n    if (this.getStatus() !== Game.gameStatus.playing) {\n      return;\n    }\n\n    let movesAVLBL = false;\n    const newState = this.state.map((row) => {\n      const filteredRow = row.filter((cell) => cell !== 0);\n      const newRow = [];\n\n      for (let i = 0; i < filteredRow.length; i++) {\n        if (filteredRow[i] === filteredRow[i + 1]) {\n          const mergedValue = filteredRow[i] * 2;\n\n          newRow.push(mergedValue);\n          this.score += mergedValue;\n          i++;\n          movesAVLBL = true;\n        } else {\n          newRow.push(filteredRow[i]);\n        }\n      }\n\n      while (newRow.length < row.length) {\n        newRow.push(0);\n      }\n\n      if (!movesAVLBL && !row.every((cell, index) => cell === newRow[index])) {\n        movesAVLBL = true;\n      }\n\n      return newRow;\n    });\n\n    if (movesAVLBL) {\n      this.state = newState;\n      this.addCell();\n      this.setState();\n      this.checkStatus();\n    }\n\n    return movesAVLBL;\n  }\n\n  moveRight() {\n    if (this.getStatus() !== Game.gameStatus.playing) {\n      return;\n    }\n\n    let movesAVLBL = false;\n    const newState = this.state.map((row) => {\n      const filteredRow = row.filter((cell) => cell !== 0);\n      const newRow = [];\n\n      for (let i = filteredRow.length - 1; i >= 0; i--) {\n        if (filteredRow[i] === filteredRow[i - 1]) {\n          const mergedValue = filteredRow[i] * 2;\n\n          newRow.unshift(mergedValue);\n          this.score += mergedValue;\n          i--;\n          movesAVLBL = true;\n        } else {\n          newRow.unshift(filteredRow[i]);\n        }\n      }\n\n      while (newRow.length < row.length) {\n        newRow.unshift(0);\n      }\n\n      if (!movesAVLBL && !row.every((cell, index) => cell === newRow[index])) {\n        movesAVLBL = true;\n      }\n\n      return newRow;\n    });\n\n    if (movesAVLBL) {\n      this.state = newState;\n      this.addCell();\n      this.setState();\n      this.checkStatus();\n    }\n\n    return movesAVLBL;\n  }\n\n  moveUp() {\n    if (this.getStatus() !== Game.gameStatus.playing) {\n      return;\n    }\n\n    let movesAVLBL = false;\n    const newState = this.state.map((row) => [...row]);\n\n    for (let c = 0; c < this.state[0].length; c++) {\n      const filteredColumn = [];\n\n      for (let r = 0; r < this.state.length; r++) {\n        if (this.state[r][c] !== 0) {\n          filteredColumn.push(this.state[r][c]);\n        }\n      }\n\n      const newColumn = [];\n\n      for (let i = 0; i < filteredColumn.length; i++) {\n        if (filteredColumn[i] === filteredColumn[i + 1]) {\n          const mergedValue = filteredColumn[i] * 2;\n\n          newColumn.push(mergedValue);\n          this.score += mergedValue;\n          i++;\n          movesAVLBL = true;\n        } else {\n          newColumn.push(filteredColumn[i]);\n        }\n      }\n\n      while (newColumn.length < this.state.length) {\n        newColumn.push(0);\n      }\n\n      for (let r = 0; r < this.state.length; r++) {\n        if (newState[r][c] !== newColumn[r]) {\n          newState[r][c] = newColumn[r];\n          movesAVLBL = true;\n        }\n      }\n    }\n\n    if (movesAVLBL) {\n      this.state = newState;\n      this.addCell();\n      this.setState();\n      this.checkStatus();\n    }\n\n    return movesAVLBL;\n  }\n\n  moveDown() {\n    if (this.getStatus() !== Game.gameStatus.playing) {\n      return;\n    }\n\n    let movesAVLBL = false;\n    const newState = this.state.map((row) => [...row]);\n\n    for (let c = 0; c < this.state[0].length; c++) {\n      const filteredColumn = [];\n\n      for (let r = this.state.length - 1; r >= 0; r--) {\n        if (this.state[r][c] !== 0) {\n          filteredColumn.push(this.state[r][c]);\n        }\n      }\n\n      const newColumn = [];\n\n      for (let i = 0; i < filteredColumn.length; i++) {\n        if (filteredColumn[i] === filteredColumn[i + 1]) {\n          const mergedValue = filteredColumn[i] * 2;\n\n          newColumn.unshift(mergedValue);\n          this.score += mergedValue;\n          i++;\n          movesAVLBL = true;\n        } else {\n          newColumn.unshift(filteredColumn[i]);\n        }\n      }\n\n      while (newColumn.length < this.state.length) {\n        newColumn.unshift(0);\n      }\n\n      for (let r = 0; r < this.state.length; r++) {\n        if (newState[r][c] !== newColumn[r]) {\n          newState[r][c] = newColumn[r];\n          movesAVLBL = true;\n        }\n      }\n    }\n\n    if (movesAVLBL) {\n      this.state = newState;\n      this.addCell();\n      this.setState();\n      this.checkStatus();\n    }\n\n    return movesAVLBL;\n  }\n\n  start() {\n    this.status = Game.gameStatus.playing;\n    this.state = this.initialState.map((row) => [...row]);\n    this.addCell();\n    this.addCell();\n    this.setState();\n  }\n\n  restart() {\n    this.score = 0;\n    this.status = Game.gameStatus.idle;\n    this.state = this.initialState.map((row) => [...row]);\n    this.setState();\n  }\n\n  addCell() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 0) {\n          emptyCells.push({ r: i, c: j });\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const randomIndex = this.addRandomNumber(emptyCells.length);\n    const { r, c } = emptyCells[randomIndex];\n    const newState = this.state.map((row) => [...row]);\n\n    newState[r][c] = this.getRandomCell();\n    this.state = newState;\n  }\n\n  setState() {\n    const cells = document.querySelectorAll('.field-cell');\n    const stateValues = this.state.flat();\n\n    if (cells.length === 0) {\n      return;\n    }\n\n    for (let i = 0; i < stateValues.length; i++) {\n      const currentCell = cells[i];\n      const currentValue = stateValues[i];\n\n      if (!currentCell) {\n        continue;\n      }\n\n      currentCell.className = 'field-cell';\n\n      if (currentValue > 0) {\n        currentCell.textContent = currentValue;\n        currentCell.classList.add(`field-cell--${currentValue}`);\n      } else {\n        currentCell.textContent = '';\n      }\n    }\n  }\n\n  addRandomNumber(max) {\n    return Math.floor(Math.random() * max);\n  }\n\n  getRandomCell() {\n    return Math.random() < 0.9 ? 2 : 4;\n  }\n\n  checkStatus() {\n    let movesAVLBL = false;\n    let canMerge = false;\n\n    const size = this.state.length;\n\n    for (let i = 0; i < size; i++) {\n      if (this.state[i].includes(2048)) {\n        this.status = Game.gameStatus.win;\n\n        return;\n      }\n    }\n\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        if (this.state[i][j] === 0) {\n          movesAVLBL = true;\n        }\n\n        if (j < size - 1 && this.state[i][j] === this.state[i][j + 1]) {\n          canMerge = true;\n        }\n\n        if (i < size - 1 && this.state[i][j] === this.state[i + 1][j]) {\n          canMerge = true;\n        }\n\n        if (movesAVLBL || canMerge) {\n          break;\n        }\n      }\n\n      if (movesAVLBL || canMerge) {\n        break;\n      }\n    }\n\n    if (!movesAVLBL && !canMerge) {\n      this.status = Game.gameStatus.lose;\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$parcel$interopDefault","a","__esModule","default","$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","gameStatus","idle","playing","win","lose","constructor","initialState","status","score","state","map","row","getState","getScore","getStatus","moveLeft","movesAVLBL","newState","filteredRow","filter","cell","newRow","i","length","mergedValue","push","every","index","addCell","setState","checkStatus","moveRight","unshift","moveUp","c","filteredColumn","r","newColumn","moveDown","start","restart","emptyCells","j","randomIndex","addRandomNumber","getRandomCell","cells","document","querySelectorAll","stateValues","flat","currentCell","currentValue","className","textContent","classList","add","max","Math","floor","random","canMerge","size","includes","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$startButton","querySelector","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$getScore","addEventListener","contains","innerHTML","remove","e","key"],"version":3,"file":"index.f4bd77fc.js.map"}